plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'com.jfrog.bintray' version '1.8.1'
    id 'maven-publish'
}

group 'org.radarcns'
version '0.5.4-SNAPSHOT'
mainClassName = 'org.radarcns.hdfs.Application'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    moduleDescription = 'RADAR HDFS restructuring'
    website = 'https://radar-base.org'
    githubRepoName = 'RADAR-base/Restructure-HDFS-topic'
    githubUrl = "https://github.com/${githubRepoName}"
    issueUrl = "${githubUrl}/issues"

    avroVersion = '1.8.2'
    jacksonVersion = '2.9.6'
    hadoopVersion = '3.0.3'
    jCommanderVersion = '1.72'
    almworksVersion = '1.1.1'
}

repositories {
    jcenter()
}

dependencies {
    api group: 'org.apache.avro', name: 'avro', version: avroVersion
    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat' , name: 'jackson-dataformat-csv', version: jacksonVersion
    implementation group: 'com.beust', name: 'jcommander', version: jCommanderVersion
    implementation group: 'com.almworks.integers', name: 'integers', version: almworksVersion

    implementation group: 'org.apache.avro', name: 'avro-mapred', version: avroVersion
    implementation group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion

    runtimeOnly group: 'org.apache.hadoop', name: 'hadoop-hdfs-client', version: hadoopVersion

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

ext.sharedManifest = manifest {
    attributes(
            "Implementation-Title": rootProject.name,
            "Implementation-Version": version)
}

jar {
    manifest {
        from sharedManifest
        attributes 'Main-Class': mainClassName
    }
}

distributions {
    main {
        contents {
            into ("share/${project.name}") {
                from 'README.md', 'LICENSE'
            }
        }
    }
}

startScripts {
    classpath += files('lib/PlaceHolderForPluginPath')

    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile    = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('PlaceHolderForPluginPath', 'radar-hdfs-plugins\\*')
        unixScriptFile.text = unixScriptFile.text.replace('PlaceHolderForPluginPath', 'radar-hdfs-plugins/*')
    }
}

tasks.withType(Tar){
    compression = Compression.GZIP
    extension = 'tar.gz'
}

task downloadDependencies {
    description "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath.files
    into "${buildDir}/third-party/"
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest.from sharedManifest
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                url = githubUrl as String
                description = moduleDescription

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'blootsvoets'
                        name = 'Joris Borgdorff'
                        email = 'joris@thehyve.nl'
                        organization = 'The Hyve'
                    }

                }
                issueManagement {
                    system = 'GitHub'
                    url = issueUrl as String
                }
                organization {
                    name = 'RADAR-base'
                    url = website
                }
                scm {
                    connection = "scm:git:${githubUrl}" as String
                    url = githubUrl as String
                }
            }
        }
    }
}


bintray {
    user project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override false
    publications 'mavenJar'
    pkg {
        repo = project.group
        name = rootProject.name
        userOrg = 'radar-cns'
        desc = moduleDescription
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}

wrapper {
    gradleVersion '4.10.2'
}
