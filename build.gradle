plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.avast.gradle.docker-compose' version "0.10.10"
}

group 'org.radarbase'
version '1.1.4-SNAPSHOT'
mainClassName = 'org.radarbase.output.Application'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    moduleDescription = 'RADAR-base output restructuring'
    website = 'https://radar-base.org'
    githubRepoName = 'RADAR-base/Restructure-HDFS-topic'
    githubUrl = "https://github.com/${githubRepoName}"
    issueUrl = "${githubUrl}/issues"

    avroVersion = '1.9.2'
    jacksonVersion = '2.10.3'
    hadoopVersion = '3.1.2'
    jCommanderVersion = '1.78'
    almworksVersion = '1.1.1'
    junitVersion = '5.6.1'
    minioVersion = '7.1.0'
    jedisVersion = '3.2.0'
    azureStorageVersion = '12.6.0'
}

repositories {
    jcenter()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation, testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly, testRuntimeOnly
}

dependencies {
    api group: 'org.apache.avro', name: 'avro', version: avroVersion
    implementation group: 'com.fasterxml.jackson.core' , name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat' , name: 'jackson-dataformat-yaml', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.dataformat' , name: 'jackson-dataformat-csv', version: jacksonVersion
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    implementation "redis.clients:jedis:$jedisVersion"

    implementation group: 'com.beust', name: 'jcommander', version: jCommanderVersion
    implementation group: 'com.almworks.integers', name: 'integers', version: almworksVersion

    implementation "io.minio:minio:$minioVersion"
    implementation("com.azure:azure-storage-blob:$azureStorageVersion")
    implementation 'com.opencsv:opencsv:5.0'

    implementation group: 'org.apache.avro', name: 'avro-mapred', version: avroVersion
    implementation group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    runtimeOnly group: 'org.apache.hadoop', name: 'hadoop-hdfs-client', version: hadoopVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileIntegrationTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

ext.sharedManifest = manifest {
    attributes(
            "Implementation-Title": rootProject.name,
            "Implementation-Version": version)
}

jar {
    manifest {
        from sharedManifest
        attributes 'Main-Class': mainClassName
    }
}

distributions {
    main {
        contents {
            into ("share/${project.name}") {
                from 'README.md', 'LICENSE'
            }
        }
    }
}

startScripts {
    classpath += files('lib/PlaceHolderForPluginPath')

    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile    = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('PlaceHolderForPluginPath', 'radar-output-plugins\\*')
        unixScriptFile.text = unixScriptFile.text.replace('PlaceHolderForPluginPath', 'radar-output-plugins/*')
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        setExceptionFormat("full")
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        showStandardStreams = true
        setExceptionFormat("full")
    }
    shouldRunAfter test
}

check.dependsOn(integrationTest)
dockerCompose.isRequiredBy(integrationTest)

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

task downloadDependencies {
    description "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath.files
    into "$buildDir/third-party/"
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    manifest.from sharedManifest
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                url = githubUrl as String
                description = moduleDescription

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'blootsvoets'
                        name = 'Joris Borgdorff'
                        email = 'joris@thehyve.nl'
                        organization = 'The Hyve'
                    }

                }
                issueManagement {
                    system = 'GitHub'
                    url = issueUrl as String
                }
                organization {
                    name = 'RADAR-base'
                    url = website
                }
                scm {
                    connection = "scm:git:${githubUrl}" as String
                    url = githubUrl as String
                }
            }
        }
    }
}

bintray {
    user project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override false
    publications 'mavenJar'
    pkg {
        repo = project.group
        name = rootProject.name
        userOrg = 'radar-base'
        desc = moduleDescription
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}

wrapper {
    gradleVersion '6.3'
}
